#include <stdio.h>
#include <stdlib.h>

typedef long key;

typedef struct Node {
    key num;
    struct Node* left;
    struct Node* right;
} Node;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int height( TreeNode* node) {
    if (node == NULL)
        return 0;
    int left = height(node->left);
    int right = height(node->right);
    return (left > right) ? left + 1 : right + 1;
}

Node* create(key a) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->num = a;
    node->left = NULL;
    node->right = NULL;
    return node;
}

Node* rot_left(Node* y) {
    Node* x = y->right;
    y->right = x->left;
    x->left = y;
    return x;
}

Node* rot_right(Node* x) {
    Node* y = x->left;
    x->left = y->right;
    y->right = x;
    return y;
}

int Balanced( TreeNode* node){
    if ( node == NULL ){
        return 0;
    }
    int left = height(node->left);
  int right = height(node->right);
  int aux = left - right;
  return (aux <= 1) && (aux >= -1) &&
         Balanced(node->left) && Balanced(node->right);

}

Node* insere(Node* node, key a) {
    if (node == NULL)
        return create(a);

    if (a < node->num)
        node->left = insere(node->left, a);
    else if (a > node->num)
        node->right = insere(node->right, a);
    else
        return node;


    int balance = balance(node);

    if (balance > 1 && a < node->left->num)
        return rot_right(node);

    if (balance < -1 && a > node->right->num)
        return rot_left(node);

    if (balance > 1 && a > node->left->num) {
        node->left = rot_left(node->left);
        return rot_right(node);
    }

    if (balance < -1 && a < node->right->num) {
        node->right = rot_right(node->right);
        return rot_left(node);
    }

    return node;
}

void freeTree(Node* no) {
    if (no != NULL) {
        freeTree(no->left);
        freeTree(no->right);
        free(no);
    }
}

void print(Node* no) {
    if (no != NULL) {
        print(no->left);
        printf("%ld ", no->num);
        print(no->right);
    }
}

int main(int argc, char const* argv[]) {
    Node* no = NULL;

    no = insere(no, 30);
    no = insere(no, 20);
    no = insere(no, 40);
    no = insere(no, 10);
    no = insere(no, 50);
    no = insere(no, 25);
    no = insere(no, 35);

    printf("\nArvore:\n");
    print(no);
    printf("\n");

    freeTree(no);
    return 0;
}
