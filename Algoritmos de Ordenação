void insertionsort ( int array[], int n ){
    int aux = 0;
    int j;
    for ( int i = 0; i < n; i++ ) {
          aux = array[i];
          j = i - 1;
          while ( array[j] > aux && j >= 0 ) {
                  array[j + 1] = array[j];
                  j = j - 1;
          }
          array[j + 1] = aux;
    }

}

void selectionsort ( int array[], int n ) {
    int min, temp;
    for ( int i = 0; i < n - 1; i++ ) {
          min = array[i];
          for ( int j = i + 1; j < n; j++ ) {
                if ( array[j] < array[min] ) {
                    min = j;
                }
          }
          temp = array[i];
          array[i] = array[min];
          array[min] = temp;
    }
}

void quicksort ( int array[], int left, int right ) {
    int i = left; 
    int j = right;
    int meio = array[(left + right)/2];
    do {
        while ( array[i] < meio ) { 
              i++; 
        }
        while( meio < array[j] ) {
              j--; 
        } 
        if ( i <= j ) { 
            temp= array[i]; 
            array[i] = array[j]; 
            array[j] = temp; 
            i++; 
            j--;
        }
    } while ( i <= j );
    if( left< j ) {
        quicksort( array,left,j ); 
    }
    if ( i < right ) {
        quicksort( array,i,right );
    }
}

void mergesort
