#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void insertionsort ( int array[], int n ){// um array de inteiros e seu tamanho
    int aux = 0; // aux -- armazena temporariamente o valor a ser inserido na posição correta
    int j;
    for ( int i = 0; i < n; i++ ) { // percorre a partir do primeiro elemento e o último elemento
          aux = array[i]; // armazena o valor atual em aux
          j = i - 1; // inicializa j como o índice anterior ao elemento atual
          while ( array[j] > aux && j >= 0 ) { // compara aux com os elementos anteriores e move os elementos maiores para a direita 
                  array[j + 1] = array[j]; // move o elemento maior para a direita
                  j = j - 1; // move para o próximo elemento anterior
          }
          array[j + 1] = aux; // insere na posição correta
    }

}

void selectionsort ( int array[], int n ) {// um array de inteiros e seu tamanho
    int min, temp;//min para armazenar o índice do menor do valor e temp para trocar temporaria
    for ( int i = 0; i < n - 1; i++ ) {//percorre até o penúltimo elemento
          min = i; // inicializa a variavel com o primeiro valor do array "s fimo o menor"
          for ( int j = i + 1; j < n; j++ ) {
                if ( array[j] < array[min] ) {// verifica se o valor atual é menor do que o indice min
                    min = j; // min recebe j se for o caso
                }
          }
          temp = array[i]; // realiza a troca entre o elemento atual e o minimo encontrado
          array[i] = array[min]; // insere na posição correta 
          array[min] = temp; // insere o valor original do elemento no lugar do minimo;
    }
}

void quicksort ( int array[], int left, int right ) { // um array de inteiros, seu primeiro valor e o seu ultimo, respectivamente
    int i = left; 
    int j = right;
    int meio = array[( left + right )/2]; //elemento pivô
    do {
        while ( array[i] < meio ) { // encontra o primeiro elemento da esquerda que é maior ou igual ao pivô
              i++; 
        }
        while( meio < array[j] ) { // encontra o primeiro elemento da direita que é menor ou igual ao pivô
              j--; 
        } 
        if ( i <= j ) { // se os valores não se cruzarem
			int temp;
            temp= array[i]; // Troca
            array[i] = array[j]; //Os 
            array[j] = temp; //Elementos
            i++; // move para direita
            j--; // move para esquerda
        }
    } while ( i <= j );// até que i seja igual ou maior que j
    if( left < j ) { // recursão do lado esquerdo
        quicksort( array,left,j ); 
    }
    if ( i < right ) {// recursão do lado direito
        quicksort( array,i,right );
    }
}

void bubblesort ( int array[], int n ) {// um array de inteiros e seu tamanho
    int temp; // variavel para trocar temporaria 
    for ( int i = 0; i < n - 1; i++ ) {
        for ( int j = 0; j < n - i - 1; j++ ) {
            if ( array[j] > array[j + 1] ) { // verifica se o elemento atual é maior que o próximo
                temp = array[j]; // Troca
                array[j] = array[j + 1]; // Os 
                array[j + 1] = temp; // Elementos
            }
        }
    }
}

void merge ( int array[], int left, int middle, int right ) {
    int i, j, k;
    int aux_left = middle - left + 1;
    int aux_right = right - middle;
    int L[aux_left], R[aux_right]; // Cria arrays temporários

    for ( i = 0; i < aux_left; i++ ) {// Copia os valores do array para arrays temporários
        L[i] = array[left + i];
    }
    for ( j = 0; j < aux_right; j++ ) {
        R[j] = array[middle + 1 + j];
    }

    i = 0;
    j = 0;
    k = left;
    while ( i < aux_left && j < aux_right ) {
        if ( L[i] <= R[j] ) {
            array[k] = L[i];
            i++;
        } else {
            array[k] = R[j];
            j++;
        }
        k++;
    }

    while ( i < aux_left ) {
        array[k] = L[i];
        i++;
        k++;
    }

    while ( j < aux_right ) {
        array[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort ( int array[], int left, int right ) {
    if ( left < right ) {
        int middle = left + (right - left) / 2; // Encontra o ponto médio do array
        mergeSort( array, left, middle ); // Ordena a primeira metade
        mergeSort( array, middle + 1, right ); // Ordena a segunda metade
        merge( array, left, middle, right ); // Mescla as duas metades ordenadas
    }
}



void randArray ( int array[], int n ) {
    for ( int i = 0; i < n; i++ ) {
        array[i] = rand() % 500;
    }
}

void print ( int array[], int n ) {
    for ( int i = 0; i < n; i++ ) {
        printf( "%d ", array[i] );
    }
    printf( "\n" );
}

int verifica( int array[], int n ) {
    for ( int i = 0; i < n - 1; i++ ) {
        if ( array[i] > array[i + 1] ) {
            return 0; 
        }
    }
    return 1;
}

int main ()
{
	srand(time(NULL));

    int n;
    printf("Infome o tamanho do vetor: ");
    scanf("%d", &n);
	clock_t inicio, fim;
    double tempo;

    int *array = (int *)malloc(n * sizeof(int));
    randArray( array, n );

	int *auxArray = (int *)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        auxArray[i] = array[i];
    }

	inicio = clock();
    insertionsort ( array, n );
    fim = clock();
    tempo = (double)( fim - inicio ) / CLOCKS_PER_SEC;

	if ( verifica ( array, n ) ) {
        printf( "Insertion Sort - Tempo de Ordenacao: %.10f\n", tempo );
    } else {
        printf("Erro\n");
    }

	inicio = clock();
    selectionsort ( array, n );
    fim = clock();
    tempo = (double)( fim - inicio ) / CLOCKS_PER_SEC;

	if ( verifica ( array, n ) ) {
        printf( "Selection Sort - Tempo de Ordenacao: %.10f\n", tempo );
    } else {
        printf("Erro\n");
    }

	inicio = clock();
    bubblesort ( array, n );
    fim = clock();
    tempo = (double)( fim - inicio ) / CLOCKS_PER_SEC;

	if ( verifica ( array, n ) ) {
        printf( "Bubble Sort - Tempo de Ordenacao: %.10f\n", tempo );
    } else {
        printf("Erro\n");
    }

	inicio = clock();
    quicksort (array, 0, n - 1);
    fim = clock();
    tempo = (double)( fim - inicio ) / CLOCKS_PER_SEC;

	if ( verifica ( array, n ) ) {
        printf( "Quick Sort - Tempo de Ordenacao: %.10f\n", tempo );
    } else {
        printf("Erro\n");
    }

	inicio = clock();
    mergeSort(array, 0, n - 1);
    fim = clock();
    tempo = (double)( fim - inicio ) / CLOCKS_PER_SEC;

	if ( verifica ( array, n ) ) {
        printf( "Merge Sort - Tempo de Ordenacao: %.10f\n", tempo );
    } else {
        printf("Erro\n");
    }

	free(array);
    free(auxArray);

	return 0;
}
